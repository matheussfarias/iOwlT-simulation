#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May  30 04:17:01 2020

@author: davi
"""

import numpy as np
import matplotlib.pyplot as plt

#####OUR ARRAY#####
error_our = []

error_our.append( 
 [35548.7775093591,
 142.8017273503193,
 11.599768390919794,
 22.71995121059136,
 4.853085443257064,
 4.430653773310287,
 5.057821207211133,
 3.561073448415022,
 3.7747785936968783,
 3.3891215719934498,
 3.064898928867941,
 3.353088502483905,
 2.9299747813297587,
 2.50848278342389,
 2.915824537133764])
 
error_our.append( 
[10112.2817307332,
 127.13171139464085,
 10.857720966019267,
 9.10027536154728,
 6.463735917848409,
 5.886190444719079,
 5.171819949401326,
 3.3947997065182114,
 4.056067149304372,
 4.486580822756775,
 3.6957667148625224,
 3.244175698374322,
 2.5902338794298445,
 2.6487928206724103,
 2.587644273061104])

error_our.append( 
[11147.031551208753,
 143.81357680705455,
 11.65818029304082,
 34.08980758528375,
 5.21011372634283,
 4.559026706985015,
 4.314667416179955,
 4.148699697524416,
 3.690572122302875,
 3.6844519634775867,
 4.2244428040252044,
 2.71962827756345,
 3.883136638431268,
 3.0159043523214564,
 2.6679903674515417])
 
error_our.append( 
[13385.241253819368,
 82.56403985077718,
 21.768422910774703,
 9.263995791688842,
 225.69493267920646,
 4.415256587415509,
 5.073302996952734,
 4.379970682031103,
 5.164911637314106,
 4.476061484278772,
 3.947329773526493,
 2.9399694082662258,
 3.420575771700527,
 3.1247380034424017,
 4.877434286705043])

error_our.append( 
[8693.741166046504,
 229.0441854109842,
 18.955374949757932,
 10.351427712381946,
 4.957870552463879,
 4.420942411159206,
 3.958573119594632,
 3.633267662545644,
 4.6903819513389164,
 2.8423324195742157,
 3.2627830108125373,
 4.08630427992464,
 2.6105883177939053,
 3.651163352282467,
 3.603777380432616])

error_our.append( 
[26887.667691526025,
 92.15178115417972,
 10.173560597550946,
 27.558613302165877,
 6.40981817146851,
 3.6911102349954867,
 3.444047480323849,
 3.3772548740356303,
 3.707558160395449,
 4.443714198147487,
 2.8679738349011057,
 3.3776694240431326,
 3.233924924195624,
 3.3410370769983535,
 2.912731474115065])

error_our.append( 
[17030.047096577495,
 253.17923279956278,
 20.899748458101584,
 8.883143435545579,
 5.302979742725811,
 4.388236441885067,
 3.6953365891570513,
 4.174730330983141,
 3.4695626329176177,
 3.137731958930249,
 2.707696556825313,
 3.333698591393891,
 3.7316534359076634,
 3.140857572779466,
 3.2419173371763526])

error_our.append( 
[16095.136536539283,
 160.34162696224251,
 20.4913870559801,
 7.3808044211248784,
 5.397089457699767,
 5.034828464000142,
 5.239314500434538,
 3.7310327349716585,
 3.522662641212508,
 5.715121761340168,
 3.4779510876811517,
 3.675650341996511,
 8.3617964285171,
 3.5662352062558575,
 3.5208718686456093])

error_our.append( 
[33565.62955157183,
 995.9972448204353,
 12.435542486145748,
 19.898564091590025,
 5.969918081245169,
 4.858408224539356,
 4.832504344107145,
 3.617605440204392,
 2.6235289566662874,
 5.48287615766202,
 2.5478876970100073,
 2.841588578740854,
 3.073952350833527,
 5.7462169824051745,
 2.814583519431268])
###################

####SQUARE ARRAY###
error_square = []

error_square.append(
[162.3071313063298,
 14.74272458671058,
 11.574460717825666,
 8.990938939725602,
 9.175197000131948,
 7.659737349170508,
 7.498952971398295,
 6.451260677078021,
 6.668748903557139,
 6.633786217245397,
 7.677405609784331,
 6.346824791777686,
 7.775093149457726,
 6.821593855158136,
 6.074831005354028])

error_square.append(
[66.40767118216151,
 17.995293623129736,
 11.24547886934011,
 8.531599665838671,
 11.058758359024527,
 7.123554489728801,
 6.695762990565519,
 6.861968675221772,
 6.755172869143011,
 7.951962114139166,
 6.967873631290627,
 6.569403911513937,
 6.389938985473054,
 6.5135782607840165,
 10.268357107243046])

error_square.append(
[424.5597051796032,
 40.43883292051752,
 19.778170009174254,
 12.54824777924258,
 8.472095295746348,
 7.127480026539088,
 7.351797931271505,
 6.700414857667239,
 7.1149259529809585,
 7.750075895121312,
 10.206481719999472,
 6.480683715884075,
 7.498571661003825,
 7.674128239780993,
 7.6833776927891515])

error_square.append(
[39.77190527260857,
 66.0231818940484,
 23.663103961851768,
 10.26563596416998,
 8.809381796870937,
 7.65828382797094,
 7.645339530615089,
 6.3476267976285605,
 7.793052446617803,
 5.675738911749714,
 9.129962843092239,
 6.861334743000796,
 6.082804210706048,
 7.2241136935740125,
 8.78962854946279])

error_square.append(
[921.2750688495544,
 31.443504419166935,
 11.567001610940201,
 7.637792031585712,
 7.5315407719270775,
 27.559666851273015,
 7.323123733592247,
 7.042186351483465,
 8.845097485195645,
 6.470783252425007,
 7.027615778259808,
 8.224474006886659,
 6.5467234560092304,
 7.714883109775316,
 8.000827649559168])

error_square.append(
[248.58600064557385,
 38.89773426491059,
 10.834395516054045,
 7.972847546195525,
 7.338429266624765,
 8.964521623862698,
 8.39376703479649,
 7.101936242595935,
 8.695270010695918,
 7.256864580062458,
 7.908550527572892,
 43.13502443452019,
 7.071197265727031,
 5.8582954347173954,
 6.817594210107218])

error_square.append(
[1371.4222378327522,
 459.64991485754786,
 12.718814521348369,
 8.207213228213632,
 55.729119045634135,
 8.504400169769811,
 12.383195439131292,
 7.071118229184016,
 7.017143564886986,
 6.934453773190354,
 7.5983982835964525,
 6.685622393062248,
 8.888370843538922,
 7.062604170502127,
 7.225260763604601])

error_square.append(
[169.49035850938156,
 13.59102293841108,
 12.794093211825581,
 8.636199427262866,
 7.185838671363794,
 7.7017378163614385,
 7.62546290690045,
 6.527073667445335,
 8.032893284491983,
 7.229076539250141,
 6.32963097095418,
 7.457440695601451,
 8.596101922474828,
 6.3769848670224425,
 6.1692217432785466])

error_square.append(
[190.041004135857,
 10.930303379892468,
 11.448118188286873,
 8.377148949570552,
 9.91037138279341,
 15.747504639946468,
 8.594302767950566,
 6.841548105189512,
 6.485239908456988,
 7.063402394931962,
 8.757358451108617,
 7.124092011821999,
 8.78825758086813,
 14.441428831282012,
 6.208251237501204])
###################

'''# Fixing random state for reproducibility
np.random.seed(19680801)

# fake up some data
spread = np.random.rand(50) * 100
center = np.ones(25) * 50
flier_high = np.random.rand(10) * 100 + 100
flier_low = np.random.rand(10) * -100
data = np.concatenate((spread, center, flier_high, flier_low))
fig1, ax1 = plt.subplots()
ax1.set_title('Basic Plot')
ax1.boxplot(data)'''

sampleRates = np.linspace(8000,120000,15)

labelSR = [str(int(i//1000))+"K" for i in sampleRates]

our = [[i[index] for i in error_our] for index in range(15)]
square = [[i[index] for i in error_square] for index in range(15)]

fig = plt.figure(1, figsize=(9, 6))
ax = fig.add_subplot(111)
bp1 = ax.boxplot(our, showfliers=True, labels=labelSR, patch_artist=True)
bp2 = ax.boxplot(square, showfliers=True, labels=labelSR ,patch_artist=True)

plt.grid(which='both', axis='both')
plt.title(f"MSE comparison between arrays", fontsize=15)
plt.yscale("log")
plt.ylabel("MSE")
plt.xlabel("samples/s")

for box1, box2 in zip(bp1['boxes'], bp2['boxes']):
    box1.set(facecolor="green", linewidth=1)
    box2.set(facecolor="blue", linewidth=1)


for whisker1, whisker2 in zip(bp1['whiskers'], bp2['whiskers']):
    whisker1.set(color='black', linewidth=1)
    whisker2.set(color='black', linewidth=1)

for cap1, cap2 in zip(bp1['caps'], bp2['caps']):
    cap.set(color='black', linewidth=1)

for median1, median2 in zip(bp1['medians'], bp2['medians']):
    median1.set(color='yellow', linewidth=1)
    median2.set(color='orange', linewidth=1)
    
for flier1, flier2 in zip(bp1['fliers'], bp2['fliers']):
    flier1.set(marker='o', markerfacecolor='green', markersize=5)
    flier2.set(marker='o', markerfacecolor='blue', markersize=5)

plt.legend([bp1['boxes'][0], bp2['boxes'][0]], ['Our Array', 'Square Array'], loc='upper right')
